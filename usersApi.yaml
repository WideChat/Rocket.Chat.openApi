openapi: 3.1.0
info:
  title: users
  version: '1.0'
servers:
  - url: '[url]/api/v1/'
paths:
  /users:
    get:
      summary: ''
      operationId: get-user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: ''
                minItems: 1
                uniqueItems: true
                x-examples:
                  example-1:
                    - email: String
                      name: String
                      password: String
                      username: String
                      active: true
                      bio: Match.Maybe(String)
                      nickname: Match.Maybe(String)
                      statusText: Match.Maybe(String)
                      roles: []
                      joinDefaultChannels: true
                      requirePasswordChange: true
                      setRandomPassword: true
                      sendWelcomeEmail: true
                      verified: true
                      customFields: {}
                items:
                  $ref: '#/components/schemas/User'
      description: |
        Returns list of all user accounts.
      parameters: []
    post:
      summary: Create New User
      operationId: post-user
      responses:
        '200':
          description: User Created
          content:
            application/json:
              schema:
                description: ''
                type: object
                x-examples:
                  example-1:
                    user:
                      email: String
                      name: String
                      password: String
                      username: String
                      active: true
                      bio: Match.Maybe(String)
                      nickname: Match.Maybe(String)
                      statusText: Match.Maybe(String)
                      roles: []
                      joinDefaultChannels: true
                      requirePasswordChange: true
                      setRandomPassword: true
                      sendWelcomeEmail: true
                      verified: true
                      customFields: {}
                    success: true
                properties:
                  user:
                    type: object
                    required:
                      - email
                      - name
                      - password
                      - username
                      - active
                      - bio
                      - nickname
                      - statusText
                      - roles
                      - joinDefaultChannels
                      - requirePasswordChange
                      - setRandomPassword
                      - sendWelcomeEmail
                      - verified
                      - customFields
                    properties:
                      email:
                        type: string
                        minLength: 1
                      name:
                        type: string
                        minLength: 1
                      password:
                        type: string
                        minLength: 1
                      username:
                        type: string
                        minLength: 1
                      active:
                        type: boolean
                      bio:
                        type: string
                        minLength: 1
                      nickname:
                        type: string
                        minLength: 1
                      statusText:
                        type: string
                        minLength: 1
                      roles:
                        type: array
                        items:
                          type: object
                      joinDefaultChannels:
                        type: boolean
                      requirePasswordChange:
                        type: boolean
                      setRandomPassword:
                        type: boolean
                      sendWelcomeEmail:
                        type: boolean
                      verified:
                        type: boolean
                      customFields:
                        type: object
                  success:
                    type: boolean
                required:
                  - user
                  - success
              examples:
                New User Bob Fellow:
                  value:
                    id: 12
                    firstName: Bob
                    lastName: Fellow
                    email: bob.fellow@gmail.com
                    dateOfBirth: '1996-08-24'
                    emailVerified: false
                    createDate: '2020-11-18'
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                email:
                  type: string
                  minLength: 1
                name:
                  type: string
                  minLength: 1
                password:
                  type: string
                  minLength: 1
                username:
                  type: string
                  minLength: 1
                active:
                  type: boolean
                bio:
                  type: string
                  minLength: 1
                nickname:
                  type: string
                  minLength: 1
                statusText:
                  type: string
                  minLength: 1
                status:
                  type: string
                  minLength: 1
                roles:
                  type: array
                  uniqueItems: true
                  minItems: 1
                  items:
                    required: []
                    properties: {}
                joinDefaultChannels:
                  type: boolean
                requirePasswordChange:
                  type: boolean
                setRandomPassword:
                  type: boolean
                sendWelcomeEmail:
                  type: boolean
                verified:
                  type: boolean
                customFields:
                  type: boolean
              required:
                - email
                - name
                - password
                - username
                - active
                - bio
                - nickname
                - statusText
                - status
                - roles
                - joinDefaultChannels
                - requirePasswordChange
                - setRandomPassword
                - sendWelcomeEmail
                - verified
                - customFields
              x-examples:
                example-1:
                  email: string
                  name: string
                  password: string
                  username: string
                  active: true
                  bio: string
                  nickname: string
                  statusText: string
                  status: string
                  roles:
                    - {}
                  joinDefaultChannels: true
                  requirePasswordChange: true
                  setRandomPassword: true
                  sendWelcomeEmail: true
                  verified: true
                  customFields: true
            examples:
              Example:
                value:
                  email: string
                  name: string
                  password: string
                  username: string
                  active: true
                  bio: string
                  nickname: string
                  statusText: string
                  status: string
                  roles:
                    - {}
                  joinDefaultChannels: true
                  requirePasswordChange: true
                  setRandomPassword: true
                  sendWelcomeEmail: true
                  verified: true
                  customFields: true
          application/xml:
            schema:
              type: object
              properties: {}
          multipart/form-data:
            schema:
              description: ''
              type: object
              properties:
                email:
                  type: string
                  minLength: 1
                name:
                  type: string
                  minLength: 1
                password:
                  type: string
                  minLength: 1
                username:
                  type: string
                  minLength: 1
                active:
                  type: boolean
                bio:
                  type: string
                  minLength: 1
                nickname:
                  type: string
                  minLength: 1
                statusText:
                  type: string
                  minLength: 1
                roles:
                  type: array
                  items:
                    required: []
                    properties: {}
                joinDefaultChannels:
                  type: boolean
                requirePasswordChange:
                  type: boolean
                setRandomPassword:
                  type: boolean
                sendWelcomeEmail:
                  type: boolean
                verified:
                  type: boolean
                customFields:
                  type: object
                  properties: {}
                  required: []
              required:
                - email
                - name
                - password
                - username
                - active
                - bio
                - nickname
                - statusText
                - roles
                - joinDefaultChannels
                - requirePasswordChange
                - setRandomPassword
                - sendWelcomeEmail
                - verified
                - customFields
              x-examples:
                example-1:
                  email: String
                  name: String
                  password: String
                  username: String
                  active: true
                  bio: Match.Maybe(String)
                  nickname: Match.Maybe(String)
                  statusText: Match.Maybe(String)
                  roles: []
                  joinDefaultChannels: true
                  requirePasswordChange: true
                  setRandomPassword: true
                  sendWelcomeEmail: true
                  verified: true
                  customFields: {}
        description: Post the necessary fields for the API to create a new user.
      description: Create a new user.
    parameters: []
  '/users/{userId}':
    delete:
      summary: ''
      operationId: delete-user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: boolean
                required:
                  - success
                x-examples:
                  example-1:
                    success: true
      parameters: []
      description: Deletes user with the specified `userId`
    get:
      summary: ''
      operationId: get-user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Example:
                  value:
                    id: 142
                    firstName: Alice
                    lastName: Smith
                    email: alice.smith@gmail.com
                    dateOfBirth: '1997-10-31'
                    emailVerified: true
                    signUpDate: '2019-08-24'
      description: Returns user with specified `userId`.
      parameters: []
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
        description: Id of the target User.
    put:
      summary: ''
      operationId: put-users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                x-examples:
                  example-1:
                    user: {}
                    success: true
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  success:
                    type: boolean
                required:
                  - user
                  - success
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              x-examples:
                example-1:
                  userId: ''
                  data:
                    email: String
                    name: String
                    password: String
                    username: String
                    active: true
                    bio: Match.Maybe(String)
                    nickname: Match.Maybe(String)
                    statusText: Match.Maybe(String)
                    roles: []
                    joinDefaultChannels: true
                    requirePasswordChange: true
                    setRandomPassword: true
                    sendWelcomeEmail: true
                    verified: true
                    customFields: {}
              properties:
                data:
                  $ref: '#/components/schemas/User'
              required:
                - data
      description: Updates user with the specified `userId`
components:
  schemas:
    User:
      description: ''
      type: object
      properties:
        user:
          type: object
          properties:
            _id:
              type: string
              minLength: 1
            createdAt:
              type: string
              minLength: 1
            services:
              type: object
              properties:
                password:
                  type: object
                  properties:
                    bcrypt:
                      type: string
                      minLength: 1
                  required:
                    - bcrypt
                email2fa:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                    changedAt:
                      type: string
                      minLength: 1
                  required:
                    - enabled
                    - changedAt
                email:
                  type: object
                  properties:
                    verificationTokens:
                      type: array
                      uniqueItems: true
                      minItems: 1
                      items:
                        required:
                          - token
                          - address
                          - when
                        properties:
                          token:
                            type: string
                            minLength: 1
                          address:
                            type: string
                            minLength: 1
                          when:
                            type: string
                            minLength: 1
                  required:
                    - verificationTokens
                resume:
                  type: object
                  properties:
                    loginTokens:
                      type: array
                      uniqueItems: true
                      minItems: 1
                      items:
                        required:
                          - when
                          - hashedToken
                        properties:
                          when:
                            type: string
                            minLength: 1
                          hashedToken:
                            type: string
                            minLength: 1
                  required:
                    - loginTokens
              required:
                - password
                - email2fa
                - email
                - resume
            emails:
              type: array
              uniqueItems: true
              minItems: 1
              items:
                required:
                  - address
                  - verified
                properties:
                  address:
                    type: string
                    minLength: 1
                  verified:
                    type: boolean
            type:
              type: string
              minLength: 1
            status:
              type: string
              minLength: 1
            active:
              type: boolean
            roles:
              type: array
              items:
                required: []
                properties: {}
            name:
              type: string
              minLength: 1
            lastLogin:
              type: string
              minLength: 1
            statusConnection:
              type: string
              minLength: 1
            utcOffset:
              type: number
            username:
              type: string
              minLength: 1
            canViewAllInfo:
              type: boolean
          required:
            - _id
            - createdAt
            - services
            - emails
            - type
            - status
            - active
            - roles
            - name
            - lastLogin
            - statusConnection
            - utcOffset
            - username
            - canViewAllInfo
        success:
          type: boolean
      required:
        - user
        - success
      x-examples:
        example-1:
          user:
            _id: QToMt7KgHyG7zBefh
            createdAt: '2021-10-19T14:27:39.580Z'
            services:
              password:
                bcrypt: $2b$10$X1u5g.0mtxOCcwAbU/h9Zu9SFKXSvRs6RdGQ7p/ZhEnuzvDtmo7XG
              email2fa:
                enabled: true
                changedAt: '2021-10-19T14:27:39.580Z'
              email:
                verificationTokens:
                  - token: rd5y-7z1_tARxdfwsTqtOj70DB91x9qsdPn8pU-EJS3
                    address: a@v.com
                    when: '2021-10-19T14:27:39.597Z'
              resume:
                loginTokens:
                  - when: '2021-11-29T19:12:43.230Z'
                    hashedToken: o6ZqaZhFRDfdKGLwnkEoXU4Llsfaek+RQi6MDdgqhwg=
                  - when: '2021-11-29T19:12:43.322Z'
                    hashedToken: VHQeM36QvRjsQ4qMGh31+47fycKKd5j4YsBhfqX4sMk=
                  - when: '2021-11-29T19:16:44.513Z'
                    hashedToken: mWelZQmES0ICvnprMiPAP9O5mLm8CYM/KQO9UCxj4Vo=
                  - when: '2021-11-29T19:16:44.600Z'
                    hashedToken: evNAzvbovbkY6XRpnbVVfKUCXHjiyN6MosmAtzCsefA=
                  - when: '2021-11-29T19:25:23.093Z'
                    hashedToken: h8/S4kFHpD8icB11zXCc1cPcr6g28ziXRk3gqhOJAKE=
                  - when: '2021-11-29T19:25:23.195Z'
                    hashedToken: NYYe9cPn58Ykq9xBK9Mo0Qk3+FTmBUfl9VFcDY33xgU=
                  - when: '2021-11-29T19:46:32.633Z'
                    hashedToken: Z5O25w6vv9sRg7nGJCdl8pO0VwJVcaI5wumVv0p13Sc=
                  - when: '2021-11-29T19:46:32.884Z'
                    hashedToken: Uy3vvi3nQkZHGzwRrzrKVYHlOB68+pNP3pP7M+r5ZPg=
                  - when: '2021-11-30T11:51:15.361Z'
                    hashedToken: 6pLMj6fwXYVbfqDEcgR7LcI7P9kp8l7YR57I8ahsaDQ=
                  - when: '2021-11-30T11:51:15.468Z'
                    hashedToken: n4SzKH+K9Um0Wj8v2SMwmgyJiHOL4khwBcLWp3o+QE8=
                  - when: '2021-11-30T11:53:56.616Z'
                    hashedToken: mm1H89OmU78ROhJ5ED5+TrKx0v4/WhN0nmg0aV3hdhc=
                  - when: '2021-11-30T11:53:56.715Z'
                    hashedToken: V/dgLeq/12UyPqs9mt2rNGPnIe5VN/PJ+VzQCB+AI5U=
                  - when: '2021-11-30T11:59:41.899Z'
                    hashedToken: +HpAOvSgVsrOPqROG1DUsch5pM/OdwsdBvZ2wg3AFB8=
                  - when: '2021-11-30T12:16:35.470Z'
                    hashedToken: OZ6YilHQid2wfVRdSdqVbWlItOevTGOb4j0aYWAUllw=
                  - when: '2021-11-30T12:16:35.561Z'
                    hashedToken: c42cYAH56X3mFDYnnuYNVssr5159boBkOheQvgIaZO0=
                  - when: '2021-11-30T12:18:05.633Z'
                    hashedToken: md33HrpmOt2drUvX9kxe8nMqop9edCHXVq2If6o6TFI=
                  - when: '2021-11-30T12:18:05.731Z'
                    hashedToken: 8DayeG6GygKhVFM+c0dg2bcFplQeY7k3pIzigfTBlVM=
                  - when: '2021-11-30T12:19:54.047Z'
                    hashedToken: DRK+04CU+JKCnx/VP9Uu2jFDkZfkSKIylfC6noJJaIs=
                  - when: '2021-11-30T12:19:54.141Z'
                    hashedToken: 7b+Tdjqh7+fDroX22xpFYZH1ax+eh7NUUGzE/ssTCu0=
                  - when: '2021-11-30T12:22:28.900Z'
                    hashedToken: SdB3b6kCPFJoZe7qYcVjv5Ao8yyh2e/2VSxeXiHV37w=
                  - when: '2021-11-30T12:22:29.001Z'
                    hashedToken: nHDEUdnUopRqnRMDSsAniOwed8iTnWZCJMjkQenu7vY=
                  - when: '2021-11-30T12:28:09.698Z'
                    hashedToken: XXVHn3kbIQk+gcpNXzeRTJd/pxW5IKvkzk3/M5XHZGk=
                  - when: '2021-11-30T12:28:09.801Z'
                    hashedToken: 2DxzRHJa9t6lYguS2EA54zCthYE/5zfwQDTAvw5s1Uo=
                  - when: '2021-11-30T12:31:59.489Z'
                    hashedToken: dlqyokt22kpIhia0R8XVQcVhCOIK18ZaCiOdlTDYhHg=
                  - when: '2021-11-30T12:31:59.582Z'
                    hashedToken: UyRI0AIdiOK/fxzVZpKRKq8lPGX7A5zbtKE+U31ho3o=
                  - when: '2021-11-30T12:33:48.248Z'
                    hashedToken: eQET8vB7UDWCR0m6W78JD3ts6M+UHhCKkHCaJRhkYeA=
                  - when: '2021-11-30T12:33:48.340Z'
                    hashedToken: CATov6TdvXRpHel/CoNYIhvzotmhSAm6jSU++lTGvqc=
                  - when: '2021-11-30T14:08:52.546Z'
                    hashedToken: uoOjFznSqVne4Kg3ky+JvSCGNl4tK1EP0ynqYhKCuCE=
                  - when: '2021-11-30T14:34:35.886Z'
                    hashedToken: DbjmfLMVjBvhwu39VQliLJEZ+8GwkuJtzi9dDeTH11w=
                  - when: '2021-11-30T14:34:35.984Z'
                    hashedToken: wDA9azDwpeX6z1arxY2EWRzmIlmCwOBlUiaM0oak2Ts=
                  - when: '2021-12-02T13:02:47.197Z'
                    hashedToken: zR2fb29kzM8gd+cM9XWNiE/wH86EHFD3WD2W+ir4tm8=
                  - when: '2021-12-06T17:18:51.383Z'
                    hashedToken: mXfokvSWyWCtJvUKE9/IuD+cmZVtEK52xYKKjY4ZEfA=
                  - when: '2021-12-06T17:18:51.488Z'
                    hashedToken: VdvP3mw3IiASN1rE7akbS5ZUsSRdjfCXejg2hXqW+EY=
                  - when: '2021-12-06T17:29:52.685Z'
                    hashedToken: 7MbAK8VX5ON34B8llA04hbQnTqQuyQwEnXdRycmP2AE=
                  - when: '2021-12-06T17:29:52.774Z'
                    hashedToken: 1tYL259QmfI7aU99RON95v9aegE1FCuSw4Z/XdOUnzk=
                  - when: '2021-12-15T13:41:44.561Z'
                    hashedToken: RfnIBpaxyo0XRn09d0ZJ7QIPft4BzUZFOrEdP8QI6eE=
                  - when: '2021-12-15T13:41:44.657Z'
                    hashedToken: TB1ShQQ2oRpfY544REPXqzqg6/AdJuGDM+W59HL0Ui0=
                  - when: '2021-12-15T13:41:50.582Z'
                    hashedToken: ZB0Ug+1b/DO4sOtToCswBWI4k6ZyB8aIgqMP4KZD1dI=
                  - when: '2021-12-15T13:41:50.678Z'
                    hashedToken: FcIO2uWN5+Xx382cCoEUEZl1yCJwdTTGoPPTbCPhjVE=
                  - when: '2021-12-15T13:44:17.009Z'
                    hashedToken: cxBmRJageqXd1CCsqltYy6UIiGuLMi+bqD1Pems7kX4=
                  - when: '2021-12-15T13:44:17.102Z'
                    hashedToken: VxGvh02OrUIOcW1Lr/OBXqFWbl5cqlolconz7SgZS5g=
                  - when: '2021-12-15T14:02:14.120Z'
                    hashedToken: pfb2S1RBfWJwpfN30nbRLIX9kO9NupIBRRS1QRNLvhA=
                  - when: '2021-12-15T14:02:14.222Z'
                    hashedToken: +tI4k2G5+boUvXq93GlfM+oG1R4amde9Nk/ApcAKwO0=
                  - when: '2021-12-15T14:02:28.096Z'
                    hashedToken: f4rpBxf6P5GqMKfRcjwM//Wdpy1E3M/17VCzqgtvwds=
                  - when: '2021-12-15T14:02:28.201Z'
                    hashedToken: gnVFPN44RV2zChuTYG2wBY42bM5Rbd2lWrtObxVDsAQ=
                  - when: '2021-12-15T14:12:35.899Z'
                    hashedToken: Nh8AjBCn+PgX7IPKagw2SFiv4biMU72XF9b0DAmgrx4=
                  - when: '2021-12-15T14:12:36.032Z'
                    hashedToken: j05FN4tAboAFAesEBc8DYw7dpmaT2Erhoq7qF+FrtBo=
                  - when: '2021-12-15T14:14:22.622Z'
                    hashedToken: JwlVP+7H0EeqXMx8t8iGlVDBhCnILAz74aPTPjTZJNw=
                  - when: '2021-12-15T14:14:22.712Z'
                    hashedToken: z5Gn/KjwopOhPrQm3ZHdg8XKagUf9LlZ1AeCbsCpdeE=
                  - when: '2022-01-03T18:47:47.024Z'
                    hashedToken: hHE4aQTd6i51qQMiTpMUUGvt2FzJdXDsXKX2fD5Xheg=
            emails:
              - address: a@v.com
                verified: false
            type: user
            status: online
            active: true
            roles:
              - user
              - admin
            name: admin
            lastLogin: '2022-01-03T18:48:53.363Z'
            statusConnection: online
            utcOffset: 2
            username: admin
            canViewAllInfo: true
          success: true
