openapi: 3.1.0
info:
  title: users
  version: '1.0'
servers:
  - url: '[url]/api/v1/'
paths:
  /users:
    get:
      summary: ''
      operationId: get-user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                description: ''
                minItems: 1
                uniqueItems: true
                x-examples:
                  example-1:
                    - email: String
                      name: String
                      password: String
                      username: String
                      active: true
                      bio: Match.Maybe(String)
                      nickname: Match.Maybe(String)
                      statusText: Match.Maybe(String)
                      roles: []
                      joinDefaultChannels: true
                      requirePasswordChange: true
                      setRandomPassword: true
                      sendWelcomeEmail: true
                      verified: true
                      customFields: {}
                items:
                  $ref: '#/components/schemas/User'
      description: |
        Returns list of all user accounts.
      parameters: []
    post:
      summary: Create New User
      operationId: post-user
      responses:
        '200':
          description: User Created
          content:
            application/json:
              schema:
                description: ''
                type: object
                x-examples:
                  example-1:
                    user:
                      email: String
                      name: String
                      password: String
                      username: String
                      active: true
                      bio: Match.Maybe(String)
                      nickname: Match.Maybe(String)
                      statusText: Match.Maybe(String)
                      roles: []
                      joinDefaultChannels: true
                      requirePasswordChange: true
                      setRandomPassword: true
                      sendWelcomeEmail: true
                      verified: true
                      customFields: {}
                    success: true
                properties:
                  user:
                    type: object
                    required:
                      - email
                      - name
                      - password
                      - username
                      - active
                      - bio
                      - nickname
                      - statusText
                      - roles
                      - joinDefaultChannels
                      - requirePasswordChange
                      - setRandomPassword
                      - sendWelcomeEmail
                      - verified
                      - customFields
                    properties:
                      email:
                        type: string
                        minLength: 1
                      name:
                        type: string
                        minLength: 1
                      password:
                        type: string
                        minLength: 1
                      username:
                        type: string
                        minLength: 1
                      active:
                        type: boolean
                      bio:
                        type: string
                        minLength: 1
                      nickname:
                        type: string
                        minLength: 1
                      statusText:
                        type: string
                        minLength: 1
                      roles:
                        type: array
                        items:
                          type: object
                      joinDefaultChannels:
                        type: boolean
                      requirePasswordChange:
                        type: boolean
                      setRandomPassword:
                        type: boolean
                      sendWelcomeEmail:
                        type: boolean
                      verified:
                        type: boolean
                      customFields:
                        type: object
                  success:
                    type: boolean
                required:
                  - user
                  - success
              examples:
                New User Bob Fellow:
                  value:
                    id: 12
                    firstName: Bob
                    lastName: Fellow
                    email: bob.fellow@gmail.com
                    dateOfBirth: '1996-08-24'
                    emailVerified: false
                    createDate: '2020-11-18'
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                email:
                  type: string
                  minLength: 1
                name:
                  type: string
                  minLength: 1
                password:
                  type: string
                  minLength: 1
                username:
                  type: string
                  minLength: 1
                active:
                  type: boolean
                bio:
                  type: string
                  minLength: 1
                nickname:
                  type: string
                  minLength: 1
                statusText:
                  type: string
                  minLength: 1
                roles:
                  type: array
                  items:
                    required: []
                    properties: {}
                joinDefaultChannels:
                  type: boolean
                requirePasswordChange:
                  type: boolean
                setRandomPassword:
                  type: boolean
                sendWelcomeEmail:
                  type: boolean
                verified:
                  type: boolean
                customFields:
                  type: boolean
              required:
                - email
                - name
                - password
                - username
                - active
                - bio
                - nickname
                - statusText
                - roles
                - joinDefaultChannels
                - requirePasswordChange
                - setRandomPassword
                - sendWelcomeEmail
                - verified
                - customFields
              x-examples:
                example-1:
                  email: String
                  name: String
                  password: String
                  username: String
                  active: true
                  bio: Match.Maybe(String)
                  nickname: Match.Maybe(String)
                  statusText: Match.Maybe(String)
                  roles: []
                  joinDefaultChannels: true
                  requirePasswordChange: true
                  setRandomPassword: true
                  sendWelcomeEmail: true
                  verified: true
                  customFields: true
            examples:
              Example:
                value:
                  email: string
                  name: string
                  password: string
                  username: string
                  active: true
                  bio: string
                  nickname: string
                  statusText: string
                  roles:
                    - {}
                  joinDefaultChannels: true
                  requirePasswordChange: true
                  setRandomPassword: true
                  sendWelcomeEmail: true
                  verified: true
                  customFields: true
          application/xml:
            schema:
              type: object
              properties: {}
          multipart/form-data:
            schema:
              description: ''
              type: object
              properties:
                email:
                  type: string
                  minLength: 1
                name:
                  type: string
                  minLength: 1
                password:
                  type: string
                  minLength: 1
                username:
                  type: string
                  minLength: 1
                active:
                  type: boolean
                bio:
                  type: string
                  minLength: 1
                nickname:
                  type: string
                  minLength: 1
                statusText:
                  type: string
                  minLength: 1
                roles:
                  type: array
                  items:
                    required: []
                    properties: {}
                joinDefaultChannels:
                  type: boolean
                requirePasswordChange:
                  type: boolean
                setRandomPassword:
                  type: boolean
                sendWelcomeEmail:
                  type: boolean
                verified:
                  type: boolean
                customFields:
                  type: object
                  properties: {}
                  required: []
              required:
                - email
                - name
                - password
                - username
                - active
                - bio
                - nickname
                - statusText
                - roles
                - joinDefaultChannels
                - requirePasswordChange
                - setRandomPassword
                - sendWelcomeEmail
                - verified
                - customFields
              x-examples:
                example-1:
                  email: String
                  name: String
                  password: String
                  username: String
                  active: true
                  bio: Match.Maybe(String)
                  nickname: Match.Maybe(String)
                  statusText: Match.Maybe(String)
                  roles: []
                  joinDefaultChannels: true
                  requirePasswordChange: true
                  setRandomPassword: true
                  sendWelcomeEmail: true
                  verified: true
                  customFields: {}
        description: Post the necessary fields for the API to create a new user.
      description: Create a new user.
    parameters: []
  '/users/{userId}':
    delete:
      summary: ''
      operationId: delete-user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: boolean
                required:
                  - success
                x-examples:
                  example-1:
                    success: true
      parameters:
        - schema:
            type: string
          in: query
          name: userId
          description: Id of the user.
        - schema:
            type: string
          in: query
          name: username
          description: Username of the user.
      description: Deletes user with the specified `userId`
    get:
      summary: ''
      operationId: get-user
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
              examples:
                Example:
                  value:
                    id: 142
                    firstName: Alice
                    lastName: Smith
                    email: alice.smith@gmail.com
                    dateOfBirth: '1997-10-31'
                    emailVerified: true
                    signUpDate: '2019-08-24'
      description: Returns user with specified `userId`.
      parameters: []
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
        description: Id of the target User.
    put:
      summary: ''
      operationId: put-users
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                x-examples:
                  example-1:
                    user: {}
                    success: true
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  success:
                    type: boolean
                required:
                  - user
                  - success
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              x-examples:
                example-1:
                  userId: ''
                  data:
                    email: String
                    name: String
                    password: String
                    username: String
                    active: true
                    bio: Match.Maybe(String)
                    nickname: Match.Maybe(String)
                    statusText: Match.Maybe(String)
                    roles: []
                    joinDefaultChannels: true
                    requirePasswordChange: true
                    setRandomPassword: true
                    sendWelcomeEmail: true
                    verified: true
                    customFields: {}
              properties:
                data:
                  $ref: '#/components/schemas/User'
              required:
                - data
      description: Updates user with the specified `userId`
  '/users/{userId}/avatar':
    get:
      summary: getUserAvatar
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  statusCode:
                    type: number
                  body:
                    type: string
                    minLength: 1
                required:
                  - statusCode
                  - body
                x-examples:
                  example-1:
                    statusCode: 307
                    body: url
              examples:
                Example:
                  value:
                    statusCode: 307
                    body: avatar-url.png
      operationId: get-users-avatar
      parameters: []
    delete:
      summary: ''
      operationId: delete-users-avatar
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: boolean
                required:
                  - success
                x-examples:
                  example-1:
                    success: true
            application/xml:
              schema:
                type: object
                properties: {}
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: boolean
                required:
                  - success
                x-examples:
                  example-1:
                    success: false
      description: 'Resets avatar of user with specified `userId` / `username`. If specified `userId` is not the callers and the caller does not have permissions to reset other users'' avatar, access is denied.'
      parameters:
        - schema:
            type: string
          in: query
          name: userId / username
          description: Id / username of the user.
          required: true
    post:
      summary: ''
      operationId: post-users-avatar
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: boolean
                required:
                  - success
                x-examples:
                  example-1:
                    success: true
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: boolean
                  error:
                    type: string
                required:
                  - success
                  - error
                x-examples:
                  example-1:
                    success: false
                    error: ''
              examples:
                No image:
                  value:
                    success: true
                    error: string
                No user with id:
                  value:
                    success: true
                    error: The optional `userId` or `username` param provided does not match any users
        '405':
          description: Method Not Allowed
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: boolean
                  error:
                    type: string
                    minLength: 1
                required:
                  - success
                  - error
                x-examples:
                  example-1:
                    success: false
                    error: Change avatar is not allowed.
              examples:
                Example:
                  value:
                    success: false
                    error: Change avatar is not allowed.
      parameters: []
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              x-examples:
                example-1:
                  userId: ''
                  username: ''
                  avatarUrl: ''
              properties:
                userId:
                  type: string
                username:
                  type: string
                avatarUrl:
                  type: string
              required:
                - avatarUrl
      description: 'Sets avatar picture for user with specified `userId` / `username`. If no user is specified, sets avatar for caller.'
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
  '/users/{userId}/active-status':
    post:
      summary: ''
      operationId: post-users-active-status
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                x-examples:
                  example-1:
                    user: {}
                    success: true
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  success:
                    type: boolean
                required:
                  - user
                  - success
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: boolean
                required:
                  - success
                x-examples:
                  example-1:
                    success: false
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              x-examples:
                example-1:
                  userId: ''
                  activeStatus: true
                  confirmRelinquish: true
              properties:
                activeStatus:
                  type: boolean
                confirmRelinquish:
                  type: boolean
              required:
                - activeStatus
                - confirmRelinquish
      description: Sets the active status of the user.
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
  '/users/{userId}/deactivate-idle':
    post:
      summary: deactivateIdleUsers
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  count:
                    type: number
                  success:
                    type: boolean
                required:
                  - count
                  - success
                x-examples:
                  example-1:
                    count: 1
                    success: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: boolean
                required:
                  - success
                x-examples:
                  example-1:
                    success: false
      operationId: post-users-deactivate-idle
      description: |-
        Deactivates user accounts that have been idle the the specified amount of days. 

        Optional: Deactivate user accounts with a specified `role`.

        Returns: Count of deactivated accounts.
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                daysIdle:
                  type: number
                role:
                  type: string
              required:
                - daysIdle
                - role
              x-examples:
                example-1:
                  daysIdle: 2
                  role: ''
      parameters: []
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
  '/users/{userId}/presence':
    get:
      summary: getUserPresence
      tags: []
      responses: {}
      operationId: get-users-presence
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                presence:
                  type: string
                  minLength: 1
                connectionStatus:
                  type: string
                  minLength: 1
                lastLogin:
                  type: string
                  minLength: 1
                success:
                  type: boolean
              required:
                - presence
                - connectionStatus
                - lastLogin
                - success
              x-examples:
                example-1:
                  presence: offline
                  connectionStatus: offline
                  lastLogin: '2021-12-07T255:04:13.521Z'
                  success: true
            examples:
              Presence with Id:
                value:
                  presence: offline
                  connectionStatus: offline
                  lastLogin: '2021-12-07T255:04:13.521Z'
                  success: true
              Presence with no Id:
                value:
                  presence: string
                  success: true
      parameters:
        - schema:
            type: string
            format: date
            default: ISO 8601 datetime
          in: query
          name: from
          description: 'Returns results whose last date they got a status change is after the specified value. '
      description: 'Returns presence of user with specified `userId` / `username`. If no user is specified, returns all users'' presence.'
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
  /users/register:
    post:
      summary: registerUser
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                        minLength: 1
                      type:
                        type: string
                        minLength: 1
                      status:
                        type: string
                        minLength: 1
                      active:
                        type: boolean
                      name:
                        type: string
                        minLength: 1
                      utcOffset:
                        type: number
                      username:
                        type: string
                        minLength: 1
                    required:
                      - _id
                      - type
                      - status
                      - active
                      - name
                      - utcOffset
                      - username
                  success:
                    type: boolean
                required:
                  - user
                  - success
                x-examples:
                  example-1:
                    user:
                      _id: nSYqWzZ4GsKTX4dyK
                      type: user
                      status: offline
                      active: true
                      name: Example User
                      utcOffset: 0
                      username: example
                    success: true
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: boolean
                  error:
                    type: string
                required:
                  - success
                  - error
                x-examples:
                  example-1:
                    success: false
                    error: ''
              examples:
                Logged in user calls registration.:
                  value:
                    success: false
                    error: Logged in users can not register again.
                Username already exists:
                  value:
                    success: false
                    error: Username is already in use.
      operationId: post-users-register
      description: 'Registers new user with `username`, `email`, `password` and `name`.'
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                username:
                  type: string
                  minLength: 1
                email:
                  type: string
                  minLength: 1
                pass:
                  type: string
                  minLength: 1
                name:
                  type: string
                  minLength: 1
              required:
                - username
                - email
                - pass
                - name
              x-examples:
                example-1:
                  username: rogersmith
                  email: roger@example.com
                  pass: passw0rd
                  name: Roger Smith
  '/users/{userId}/status':
    get:
      summary: getUserStatus
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  message:
                    type: string
                    minLength: 1
                  connectionStatus:
                    type: string
                    minLength: 1
                  status:
                    type: string
                    minLength: 1
                  success:
                    type: boolean
                required:
                  - message
                  - connectionStatus
                  - status
                  - success
                x-examples:
                  example-1:
                    message: My status update
                    connectionStatus: online
                    status: away
                    success: true
              examples:
                Example:
                  value:
                    message: ''
                    connectionStatus: online
                    status: away
                    success: true
      operationId: get-users-status
      parameters: []
      description: 'Returns status of user with the specified `userId`. If no `userId` exists, returns stauts or caller.'
    post:
      summary: setUserStatus
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: boolean
                required:
                  - success
                x-examples:
                  example-1:
                    success: true
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: boolean
                required:
                  - success
                x-examples:
                  example-1:
                    success: false
      operationId: post-users-status
      description: Sets status of user with specified `userId` / `username`.
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              x-examples:
                example-1:
                  message: ''
                  status: ''
              properties:
                message:
                  type: string
                status:
                  type: string
              required:
                - message
            examples:
              example-1:
                value:
                  message: My new status
                  status: onlone/away/busy/offline
      parameters:
        - schema:
            type: string
          in: query
          name: userId / username
          description: Id / username of the user.
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
  /users/basic-info:
    post:
      summary: updateOwnBasicInfo
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                x-examples:
                  example-1:
                    user: {}
                    success: true
                properties:
                  user:
                    $ref: '#/components/schemas/User'
                  success:
                    type: boolean
                required:
                  - user
                  - success
              examples:
                Example:
                  value:
                    user:
                      id: 142
                      firstName: Alice
                      lastName: Smith
                      email: alice.smith@gmail.com
                      dateOfBirth: '1997-10-31'
                      emailVerified: true
                      signUpDate: '2019-08-24'
                    success: true
      operationId: post-users-basic-info
      description: Updates caller's basic info and returns updated User.
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              x-examples:
                example-1:
                  data:
                    email: rocket.cat@rocket.chat
                    newPassword: passw0rd
                    currentPassword: 5994471abb01112afcc18159f6cc74b4f511b99806da59b3caf5a9c173cacfc5
                    username: rocket.cat
                    name: Example user
              properties:
                data:
                  type: object
                  required:
                    - email
                    - newPassword
                    - currentPassword
                    - username
                    - name
                  properties:
                    email:
                      type: string
                      minLength: 1
                    newPassword:
                      type: string
                      minLength: 1
                    currentPassword:
                      type: string
                      minLength: 1
                      description: Needs to be encrypted in SHA256
                    username:
                      type: string
                      minLength: 1
                    name:
                      type: string
                      minLength: 1
              required:
                - data
  '/users/{userId}/create-token':
    post:
      summary: ''
      operationId: post-users-create-token
      responses:
        '200':
          description: OK
      description: To be able to use this endpoint you must set the `ENV VAR (CREATE_TOKENS_FOR_USERS=true)`.
      parameters: []
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
  /users/preferences:
    get:
      summary: getUserPreference
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  preferences:
                    type: object
                    properties:
                      newRoomNotification:
                        type: string
                        minLength: 1
                      newMessageNotification:
                        type: string
                        minLength: 1
                      muteFocusedConversations:
                        type: boolean
                      useEmojis:
                        type: boolean
                      convertAsciiEmoji:
                        type: boolean
                      saveMobileBandwidth:
                        type: boolean
                      collapseMediaByDefault:
                        type: boolean
                      autoImageLoad:
                        type: boolean
                      emailNotificationMode:
                        type: string
                        minLength: 1
                      roomsListExhibitionMode:
                        type: string
                        minLength: 1
                      unreadAlert:
                        type: boolean
                      notificationsSoundVolume:
                        type: number
                      desktopNotifications:
                        type: string
                        minLength: 1
                      mobileNotifications:
                        type: string
                        minLength: 1
                      enableAutoAway:
                        type: boolean
                      highlights:
                        type: array
                        items:
                          required: []
                          properties: {}
                      desktopNotificationDuration:
                        type: number
                      viewMode:
                        type: number
                      hideUsernames:
                        type: boolean
                      hideRoles:
                        type: boolean
                      hideAvatars:
                        type: boolean
                      hideFlexTab:
                        type: boolean
                      sendOnEnter:
                        type: string
                        minLength: 1
                      roomCounterSidebar:
                        type: boolean
                    required:
                      - newRoomNotification
                      - newMessageNotification
                      - muteFocusedConversations
                      - useEmojis
                      - convertAsciiEmoji
                      - saveMobileBandwidth
                      - collapseMediaByDefault
                      - autoImageLoad
                      - emailNotificationMode
                      - roomsListExhibitionMode
                      - unreadAlert
                      - notificationsSoundVolume
                      - desktopNotifications
                      - mobileNotifications
                      - enableAutoAway
                      - highlights
                      - desktopNotificationDuration
                      - viewMode
                      - hideUsernames
                      - hideRoles
                      - hideAvatars
                      - hideFlexTab
                      - sendOnEnter
                      - roomCounterSidebar
                  success:
                    type: boolean
                required:
                  - preferences
                  - success
                x-examples:
                  example-1:
                    preferences:
                      newRoomNotification: door
                      newMessageNotification: chime
                      muteFocusedConversations: true
                      useEmojis: true
                      convertAsciiEmoji: true
                      saveMobileBandwidth: true
                      collapseMediaByDefault: false
                      autoImageLoad: true
                      emailNotificationMode: all
                      roomsListExhibitionMode: category
                      unreadAlert: true
                      notificationsSoundVolume: 100
                      desktopNotifications: default
                      mobileNotifications: default
                      enableAutoAway: true
                      highlights: []
                      desktopNotificationDuration: 0
                      viewMode: 0
                      hideUsernames: false
                      hideRoles: false
                      hideAvatars: false
                      hideFlexTab: false
                      sendOnEnter: normal
                      roomCounterSidebar: false
                    success: true
              examples:
                Example:
                  value:
                    preferences:
                      newRoomNotification: door
                      newMessageNotification: chime
                      muteFocusedConversations: true
                      useEmojis: true
                      convertAsciiEmoji: true
                      saveMobileBandwidth: true
                      collapseMediaByDefault: false
                      autoImageLoad: true
                      emailNotificationMode: all
                      roomsListExhibitionMode: category
                      unreadAlert: true
                      notificationsSoundVolume: 100
                      desktopNotifications: default
                      mobileNotifications: default
                      enableAutoAway: true
                      highlights: []
                      desktopNotificationDuration: 0
                      viewMode: 0
                      hideUsernames: false
                      hideRoles: false
                      hideAvatars: false
                      hideFlexTab: false
                      sendOnEnter: normal
                      roomCounterSidebar: false
                    success: true
      operationId: get-users-preferences
      description: Returns user preferences of the caller.
    post:
      summary: setUserPreferences
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: boolean
                  user:
                    type: object
                    properties:
                      _id:
                        type: string
                        minLength: 1
                      settings:
                        type: object
                        properties:
                          preferences:
                            type: object
                            properties:
                              newRoomNotification:
                                type: string
                                minLength: 1
                              newMessageNotification:
                                type: string
                                minLength: 1
                              muteFocusedConversations:
                                type: boolean
                              useEmojis:
                                type: boolean
                              convertAsciiEmoji:
                                type: boolean
                              saveMobileBandwidth:
                                type: boolean
                              collapseMediaByDefault:
                                type: boolean
                              autoImageLoad:
                                type: boolean
                              emailNotificationMode:
                                type: string
                                minLength: 1
                              roomsListExhibitionMode:
                                type: string
                                minLength: 1
                              unreadAlert:
                                type: boolean
                              notificationsSoundVolume:
                                type: number
                              desktopNotifications:
                                type: string
                                minLength: 1
                              mobileNotifications:
                                type: string
                                minLength: 1
                              enableAutoAway:
                                type: boolean
                              highlights:
                                type: array
                                items:
                                  required: []
                                  properties: {}
                              desktopNotificationDuration:
                                type: number
                              desktopNotificationRequireInteraction:
                                type: boolean
                              viewMode:
                                type: number
                              hideUsernames:
                                type: boolean
                              hideRoles:
                                type: boolean
                              hideAvatars:
                                type: boolean
                              hideFlexTab:
                                type: boolean
                              sendOnEnter:
                                type: string
                                minLength: 1
                              roomCounterSidebar:
                                type: boolean
                            required:
                              - newRoomNotification
                              - newMessageNotification
                              - muteFocusedConversations
                              - useEmojis
                              - convertAsciiEmoji
                              - saveMobileBandwidth
                              - collapseMediaByDefault
                              - autoImageLoad
                              - emailNotificationMode
                              - roomsListExhibitionMode
                              - unreadAlert
                              - notificationsSoundVolume
                              - desktopNotifications
                              - mobileNotifications
                              - enableAutoAway
                              - highlights
                              - desktopNotificationDuration
                              - desktopNotificationRequireInteraction
                              - viewMode
                              - hideUsernames
                              - hideRoles
                              - hideAvatars
                              - hideFlexTab
                              - sendOnEnter
                              - roomCounterSidebar
                        required:
                          - preferences
                    required:
                      - _id
                      - settings
                required:
                  - success
                  - user
                x-examples:
                  example-1:
                    success: true
                    user:
                      _id: rocketchat.internal.admin.test
                      settings:
                        preferences:
                          newRoomNotification: door
                          newMessageNotification: chime
                          muteFocusedConversations: true
                          useEmojis: true
                          convertAsciiEmoji: true
                          saveMobileBandwidth: true
                          collapseMediaByDefault: false
                          autoImageLoad: true
                          emailNotificationMode: all
                          roomsListExhibitionMode: category
                          unreadAlert: true
                          notificationsSoundVolume: 100
                          desktopNotifications: default
                          mobileNotifications: default
                          enableAutoAway: true
                          highlights: []
                          desktopNotificationDuration: 0
                          desktopNotificationRequireInteraction: false
                          viewMode: 0
                          hideUsernames: false
                          hideRoles: false
                          hideAvatars: false
                          hideFlexTab: false
                          sendOnEnter: normal
                          roomCounterSidebar: false
              examples:
                Example:
                  value:
                    success: true
                    user:
                      _id: rocketchat.internal.admin.test
                      settings:
                        preferences:
                          newRoomNotification: door
                          newMessageNotification: chime
                          muteFocusedConversations: true
                          useEmojis: true
                          convertAsciiEmoji: true
                          saveMobileBandwidth: true
                          collapseMediaByDefault: false
                          autoImageLoad: true
                          emailNotificationMode: all
                          roomsListExhibitionMode: category
                          unreadAlert: true
                          notificationsSoundVolume: 100
                          desktopNotifications: default
                          mobileNotifications: default
                          enableAutoAway: true
                          highlights: []
                          desktopNotificationDuration: 0
                          desktopNotificationRequireInteraction: false
                          viewMode: 0
                          hideUsernames: false
                          hideRoles: false
                          hideAvatars: false
                          hideFlexTab: false
                          sendOnEnter: normal
                          roomCounterSidebar: false
      operationId: post-users-preferences
      description: Sets user preferences of user with specified `userId`.
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                userId:
                  type: string
                data:
                  type: object
                  properties:
                    newRoomNotification:
                      type: string
                      minLength: 1
                    newMessageNotification:
                      type: string
                      minLength: 1
                    muteFocusedConversations:
                      type: boolean
                    useEmojis:
                      type: boolean
                    convertAsciiEmoji:
                      type: boolean
                    saveMobileBandwidth:
                      type: boolean
                    collapseMediaByDefault:
                      type: boolean
                    autoImageLoad:
                      type: boolean
                    emailNotificationMode:
                      type: string
                      minLength: 1
                    roomsListExhibitionMode:
                      type: string
                      minLength: 1
                    unreadAlert:
                      type: boolean
                    notificationsSoundVolume:
                      type: number
                    desktopNotifications:
                      type: string
                      minLength: 1
                    mobileNotifications:
                      type: string
                      minLength: 1
                    enableAutoAway:
                      type: boolean
                    highlights:
                      type: array
                      items:
                        required: []
                        properties: {}
                    desktopNotificationDuration:
                      type: number
                    desktopNotificationRequireInteraction:
                      type: boolean
                    viewMode:
                      type: number
                    hideUsernames:
                      type: boolean
                    hideRoles:
                      type: boolean
                    hideAvatars:
                      type: boolean
                    hideFlexTab:
                      type: boolean
                    sendOnEnter:
                      type: string
                      minLength: 1
                    roomCounterSidebar:
                      type: boolean
                  required:
                    - newRoomNotification
                    - newMessageNotification
                    - muteFocusedConversations
                    - useEmojis
                    - convertAsciiEmoji
                    - saveMobileBandwidth
                    - collapseMediaByDefault
                    - autoImageLoad
                    - emailNotificationMode
                    - roomsListExhibitionMode
                    - unreadAlert
                    - notificationsSoundVolume
                    - desktopNotifications
                    - mobileNotifications
                    - enableAutoAway
                    - highlights
                    - desktopNotificationDuration
                    - desktopNotificationRequireInteraction
                    - viewMode
                    - hideUsernames
                    - hideRoles
                    - hideAvatars
                    - hideFlexTab
                    - sendOnEnter
                    - roomCounterSidebar
              required:
                - userId
                - data
              x-examples:
                example-1:
                  userId: ''
                  data:
                    newRoomNotification: door
                    newMessageNotification: chime
                    muteFocusedConversations: true
                    useEmojis: true
                    convertAsciiEmoji: true
                    saveMobileBandwidth: true
                    collapseMediaByDefault: false
                    autoImageLoad: true
                    emailNotificationMode: all
                    roomsListExhibitionMode: category
                    unreadAlert: true
                    notificationsSoundVolume: 100
                    desktopNotifications: default
                    mobileNotifications: default
                    enableAutoAway: true
                    highlights: []
                    desktopNotificationDuration: 0
                    desktopNotificationRequireInteraction: false
                    viewMode: 0
                    hideUsernames: false
                    hideRoles: false
                    hideAvatars: false
                    hideFlexTab: false
                    sendOnEnter: normal
                    roomCounterSidebar: false
            examples:
              Example:
                value:
                  userId: string
                  data:
                    newRoomNotification: door
                    newMessageNotification: chime
                    muteFocusedConversations: true
                    useEmojis: true
                    convertAsciiEmoji: true
                    saveMobileBandwidth: true
                    collapseMediaByDefault: false
                    autoImageLoad: true
                    emailNotificationMode: all
                    roomsListExhibitionMode: category
                    unreadAlert: true
                    notificationsSoundVolume: 100
                    desktopNotifications: default
                    mobileNotifications: default
                    enableAutoAway: true
                    highlights: []
                    desktopNotificationDuration: 0
                    desktopNotificationRequireInteraction: false
                    viewMode: 0
                    hideUsernames: false
                    hideRoles: false
                    hideAvatars: false
                    hideFlexTab: false
                    sendOnEnter: normal
                    roomCounterSidebar: false
  /users/forgot-password:
    post:
      summary: forgetUserPassword
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: boolean
                required:
                  - success
                x-examples:
                  example-1:
                    success: true
      operationId: post-users-forgot-password
      description: Sends email to the specified `email` for password recovery.
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                email:
                  type: string
              required:
                - email
              x-examples:
                example-1:
                  email: ''
  /users/username-suggestion:
    get:
      summary: getUsernameSuggestion
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  result:
                    type: string
                    minLength: 1
                  success:
                    type: boolean
                required:
                  - result
                  - success
                x-examples:
                  example-1:
                    result: rocket.cat
                    success: true
      operationId: get-users-username-suggestion
      description: Returns a username suggestion for the caller.
  /users/personal-access-token:
    post:
      summary: generatePersonalAccessToken
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  token:
                    type: string
                    minLength: 1
                  success:
                    type: boolean
                required:
                  - token
                  - success
                x-examples:
                  example-1:
                    token: 2jdk99wuSjXPO201XlAks9sjDjAhSJmskAKW301mSuj9Sk
                    success: true
              examples:
                Example:
                  value:
                    token: string
                    success: true
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: boolean
                  error:
                    type: string
                    minLength: 1
                required:
                  - success
                  - error
                x-examples:
                  example-1:
                    success: false
                    error: The 'tokenName' is required
              examples:
                Example:
                  value:
                    success: false
                    error: The 'tokenName' is required
      operationId: post-users-personal-access-token
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                tokenName:
                  type: string
                  minLength: 1
                bypassTwoFactor:
                  type: boolean
              required:
                - tokenName
                - bypassTwoFactor
              x-examples:
                example-1:
                  tokenName: mypersonaltoken
                  bypassTwoFactor: true
            examples:
              Example:
                value:
                  tokenName: token-1
                  bypassTwoFactor: true
      description: Generates personal access token for the caller.
    get:
      summary: getAccessToken
      operationId: get-users-personal-access-token
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  tokens:
                    type: array
                    uniqueItems: true
                    minItems: 1
                    items:
                      required:
                        - name
                        - createdAt
                        - lastTokenPart
                      properties:
                        name:
                          type: string
                          minLength: 1
                        createdAt:
                          type: string
                          minLength: 1
                        lastTokenPart:
                          type: string
                          minLength: 1
                  success:
                    type: boolean
                required:
                  - tokens
                  - success
                x-examples:
                  example-1:
                    tokens:
                      - name: myToken
                        createdAt: '2018-08-01T17:17:48.068Z'
                        lastTokenPart: R8Agh3
                    success: true
              examples:
                Example:
                  value:
                    tokens:
                      - name: myToken
                        createdAt: '2018-08-01T17:17:48.068Z'
                        lastTokenPart: R8Agh3
                    success: true
      description: Returns caller's access tokens
    delete:
      summary: deletePersonalAccessToken
      operationId: delete-users-personal-access-token
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: boolean
                required:
                  - success
                x-examples:
                  example-1:
                    success: true
              examples:
                Example:
                  value:
                    success: true
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: boolean
                  error:
                    type: string
                    minLength: 1
                required:
                  - success
                  - error
                x-examples:
                  example-1:
                    success: false
                    error: The 'tokenName' is requires
              examples:
                Example:
                  value:
                    success: false
                    error: The 'tokenName' is required
      description: Deletes caller's token with the specified `tokenName`
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                tokenName:
                  type: string
              required:
                - tokenName
              x-examples:
                example-1:
                  tokenName: ''
            examples:
              Example:
                value:
                  tokenName: token-1
  /users/regenerate-personal-access-token:
    post:
      summary: regeneratePersonalAccessToken
      tags: []
      responses: {}
      operationId: post-users-regenerate-personal-access-token
      description: Regenerates personal access token for the caller.
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                tokenName:
                  type: string
              required:
                - tokenName
              x-examples:
                example-1:
                  tokenName: ''
            examples:
              Example:
                value:
                  tokenName: token-1
  /users/2fa-enable-email:
    post:
      summary: enable2faEmail
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: boolean
                required:
                  - success
                x-examples:
                  example-1:
                    success: true
      operationId: post-users-2fa-enable-email
  /users/2fa-send-email-code:
    post:
      summary: send2faEmailCode
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: boolean
                required:
                  - success
                x-examples:
                  example-1:
                    success: true
        '':
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: boolean
                required:
                  - success
                x-examples:
                  example-1:
                    success: true
      operationId: post-users-2fa-enable-email
      requestBody:
        content:
          application/json:
            schema:
              type: object
              properties: {}
      description: 'Sends email code to the specified email, or takes email from specified user. [Bad format, may need to change]'
    parameters: []
  /users/2fa-disable-email:
    post:
      summary: disable2faEmail
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: boolean
                required:
                  - success
                x-examples:
                  example-1:
                    success: true
      operationId: post-users-2fa-enable-email
    parameters: []
  /users/request-data-download:
    get:
      summary: requestDataDownload
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  requested:
                    type: boolean
                  exportOperation:
                    type: object
                    properties:
                      _id:
                        type: string
                        minLength: 1
                      createdAt:
                        type: string
                        minLength: 1
                      userId:
                        type: string
                        minLength: 1
                      roomList:
                        type: array
                        uniqueItems: true
                        minItems: 1
                        items:
                          required:
                            - roomId
                            - roomName
                            - exportedCount
                            - status
                            - targetFile
                            - type
                          properties:
                            roomId:
                              type: string
                              minLength: 1
                            roomName:
                              type: string
                              minLength: 1
                            userId: {}
                            exportedCount:
                              type: number
                            status:
                              type: string
                              minLength: 1
                            targetFile:
                              type: string
                              minLength: 1
                            type:
                              type: string
                              minLength: 1
                      status:
                        type: string
                        minLength: 1
                      exportPath:
                        type: string
                        minLength: 1
                      assetsPath:
                        type: string
                        minLength: 1
                      fileList:
                        type: array
                        items:
                          required: []
                          properties: {}
                      generatedFile:
                        type: string
                        minLength: 1
                      fullExport:
                        type: boolean
                      _updatedAt:
                        type: string
                        minLength: 1
                    required:
                      - _id
                      - createdAt
                      - userId
                      - roomList
                      - status
                      - exportPath
                      - assetsPath
                      - fileList
                      - generatedFile
                      - fullExport
                      - _updatedAt
                  success:
                    type: boolean
                required:
                  - requested
                  - exportOperation
                  - success
                x-examples:
                  example-1:
                    requested: false
                    exportOperation:
                      _id: uDSuaW7vGd9B7j8qD
                      createdAt: '2019-06-07T23:02:13.359Z'
                      userId: hjwGZafNqExtFNmN7
                      roomList:
                        - roomId: GENERAL
                          roomName: general
                          userId: null
                          exportedCount: 8
                          status: completed
                          targetFile: general.html
                          type: c
                      status: uploading
                      exportPath: /tmp/userData/hjwGZafNqExtFNmN7/partial
                      assetsPath: /tmp/userData/hjwGZafNqExtFNmN7/partial/assets
                      fileList: []
                      generatedFile: /tmp/zipFiles/hjwGZafNqExtFNmN7.zip
                      fullExport: false
                      _updatedAt: '2019-06-07T23:15:00.326Z'
                    success: true
              examples:
                Example:
                  value:
                    requested: false
                    exportOperation:
                      _id: uDSuaW7vGd9B7j8qD
                      createdAt: '2019-06-07T23:02:13.359Z'
                      userId: hjwGZafNqExtFNmN7
                      roomList:
                        - roomId: GENERAL
                          roomName: general
                          userId: null
                          exportedCount: 8
                          status: completed
                          targetFile: general.html
                          type: c
                      status: uploading
                      exportPath: /tmp/userData/hjwGZafNqExtFNmN7/partial
                      assetsPath: /tmp/userData/hjwGZafNqExtFNmN7/partial/assets
                      fileList: []
                      generatedFile: /tmp/zipFiles/hjwGZafNqExtFNmN7.zip
                      fullExport: false
                      _updatedAt: '2019-06-07T23:15:00.326Z'
                    success: true
      operationId: get-users-request-data-download
      parameters:
        - schema:
            type: boolean
          in: query
          name: fullExport
          description: 'Requires full export. Default: `false`'
  /users/logout-other-clients:
    post:
      summary: logoutOtherClients
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  token:
                    type: string
                    minLength: 1
                  tokenExpires:
                    type: string
                    minLength: 1
                  success:
                    type: boolean
                required:
                  - token
                  - tokenExpires
                  - success
                x-examples:
                  example-1:
                    token: SnS70r0VkngGFrSbxVK-pdwFMEzhefcjQgdnXaPeAaq
                    tokenExpires: '2021-12-27T14:33:09.851Z'
                    success: true
              examples:
                Example:
                  value:
                    token: SnS70r0VkngGFrSbxVK-pdwFMEzhefcjQgdnXaPeAaq
                    tokenExpires: '2021-12-27T14:33:09.851Z'
                    success: true
        '400':
          description: Bad Request
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  status:
                    type: string
                    minLength: 1
                  message:
                    type: string
                    minLength: 1
                required:
                  - status
                  - message
                x-examples:
                  example-1:
                    status: error
                    message: You must be logged in to do this.
              examples:
                example-1:
                  value:
                    status: error
                    message: You must be logged in to do this.
      operationId: post-users-logout-other-clients
      parameters:
        - schema:
            type: string
          in: header
          name: X-User-Id
          description: Id of caller user.
        - schema:
            type: string
          in: header
          name: X-Auth-Token
          description: Token generated upon login.
  /users/autocomplete:
    get:
      summary: userAutocomplete
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  items:
                    type: array
                    uniqueItems: true
                    minItems: 1
                    items:
                      required:
                        - _id
                        - username
                        - status
                        - name
                        - nickname
                      properties:
                        _id:
                          type: string
                          minLength: 1
                        username:
                          type: string
                          minLength: 1
                        status:
                          type: string
                          minLength: 1
                        name:
                          type: string
                          minLength: 1
                        nickname:
                          type: string
                          minLength: 1
                  success:
                    type: boolean
                required:
                  - items
                  - success
                x-examples:
                  example-1:
                    items:
                      - _id: 6esQ6cpqSQYvoLTvC
                        username: Aaron.altamirano
                        status: offline
                        name: 'Aaron Altamirano '
                        nickname: aaron.altamirano@rocket.chat
                      - _id: AySWYsyzToxy3239z
                        username: Balazs.Nemethi
                        status: offline
                        name: Balázs Némethi
                      - _id: gxcJTYapi5mPxuAme
                        username: Bruno.Solis
                        status: offline
                        name: Bruno Solis
                        avatarETag: ZAHMxLQ6bW426Knwm
                      - _id: kvqbntLso8y2dEx7C
                        username: Ivan.Belousov
                        status: offline
                        name: Ivan
                      - _id: AkFjhgJFHAhNK3e6o
                        status: offline
                        name: Karina Monarkh
                        username: Karina
                      - _id: M3ajjGeyg8SfKXopd
                        username: Rucks_guest2
                        status: offline
                        name: Rucks_guest2
                        nickname: anonymous3
                    success: true
              examples:
                Example:
                  value:
                    items:
                      - _id: gxcJTYapi5mPxuAme
                        username: JohnD
                        status: offline
                        name: John Doe
                        nickname: JohnD
                    success: true
      operationId: get-users-autocomplete
      description: List of users whose names match a given pattern.
      parameters:
        - schema:
            type: string
            default: '{ "exceptions: []" }'
          in: query
          name: selector
          description: Users that will be excluded from the list.
          required: true
  /users/remove-other-tokens:
    post:
      summary: removeOtherTokens
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: boolean
                required:
                  - success
                x-examples:
                  example-1:
                    success: true
      operationId: post-users-remove-other-tokens
  '/users/{userId}/reset-e2e-key':
    post:
      summary: resetE2EKey
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: boolean
                required:
                  - success
                x-examples:
                  example-1:
                    success: true
      operationId: post-users-reset-e2e-key
      parameters: []
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
  '/users/{userId}/reset-totp':
    post:
      summary: resetTOTP
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: boolean
                required:
                  - success
                x-examples:
                  example-1:
                    success: true
      operationId: post-users-reset-e2e-key
      parameters: []
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
  '/users/{userId}/teams':
    get:
      summary: getUserTeams
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  teams:
                    type: array
                    uniqueItems: true
                    minItems: 1
                    items:
                      required:
                        - _id
                        - name
                        - type
                        - createdAt
                        - _updatedAt
                        - roomId
                        - isOwner
                      properties:
                        _id:
                          type: string
                          minLength: 1
                        name:
                          type: string
                          minLength: 1
                        type:
                          type: number
                        createdAt:
                          type: string
                          minLength: 1
                        createdBy:
                          type: object
                          properties:
                            _id:
                              type: string
                              minLength: 1
                            username:
                              type: string
                              minLength: 1
                          required:
                            - _id
                            - username
                        _updatedAt:
                          type: string
                          minLength: 1
                        roomId:
                          type: string
                          minLength: 1
                        isOwner:
                          type: boolean
                  success:
                    type: boolean
                required:
                  - teams
                  - success
                x-examples:
                  example-1:
                    teams:
                      - _id: 612b8ae982d286c3
                        name: documentation-team
                        type: 0
                        createdAt: '2021-08-29T13:26:01.750Z'
                        createdBy:
                          _id: JxemcN9PDCdfzJe
                          username: renato.b
                        _updatedAt: '2021-08-29T13:26:01.762Z'
                        roomId: GwktYAajqw4RiWiBK
                        isOwner: true
                    success: true
              examples:
                example-1:
                  value:
                    teams:
                      - _id: 612b8ae982d286c3
                        name: documentation-team
                        type: 0
                        createdAt: '2021-08-29T13:26:01.750Z'
                        createdBy:
                          _id: JxemcN9PDCdfzJe
                          username: renato.b
                        _updatedAt: '2021-08-29T13:26:01.762Z'
                        roomId: GwktYAajqw4RiWiBK
                        isOwner: true
                    success: true
      operationId: get-users-teams
      description: Returns a list of the teams the user with the specified `userId` is in.
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                userId:
                  type: string
              required:
                - userId
              x-examples:
                example-1:
                  userId: ''
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
  '/users/{userId}/logout':
    post:
      summary: logoutUser
      tags: []
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                description: ''
                type: object
                properties:
                  success:
                    type: boolean
                  message:
                    type: string
                    minLength: 1
                required:
                  - success
                  - message
                x-examples:
                  example-1:
                    success: true
                    message: User `userId` has been logged out!
              examples:
                Example:
                  value:
                    success: true
                    message: User `userId` has been logged out!
      operationId: post-users-logout
      description: 'Logout user with the specified `userId`. If no `userId`, logout caller. '
      requestBody:
        content:
          application/json:
            schema:
              description: ''
              type: object
              properties:
                userId:
                  type: string
              required:
                - userId
              x-examples:
                example-1:
                  userId: ''
    parameters:
      - schema:
          type: string
        name: userId
        in: path
        required: true
components:
  schemas:
    User:
      description: ''
      type: object
      properties:
        user:
          type: object
          properties:
            _id:
              type: string
              minLength: 1
            createdAt:
              type: string
              minLength: 1
            services:
              type: object
              properties:
                password:
                  type: object
                  properties:
                    bcrypt:
                      type: string
                      minLength: 1
                  required:
                    - bcrypt
                email2fa:
                  type: object
                  properties:
                    enabled:
                      type: boolean
                    changedAt:
                      type: string
                      minLength: 1
                  required:
                    - enabled
                    - changedAt
                email:
                  type: object
                  properties:
                    verificationTokens:
                      type: array
                      uniqueItems: true
                      minItems: 1
                      items:
                        required:
                          - token
                          - address
                          - when
                        properties:
                          token:
                            type: string
                            minLength: 1
                          address:
                            type: string
                            minLength: 1
                          when:
                            type: string
                            minLength: 1
                  required:
                    - verificationTokens
                resume:
                  type: object
                  properties:
                    loginTokens:
                      type: array
                      uniqueItems: true
                      minItems: 1
                      items:
                        required:
                          - when
                          - hashedToken
                        properties:
                          when:
                            type: string
                            minLength: 1
                          hashedToken:
                            type: string
                            minLength: 1
                  required:
                    - loginTokens
              required:
                - password
                - email2fa
                - email
                - resume
            emails:
              type: array
              uniqueItems: true
              minItems: 1
              items:
                required:
                  - address
                  - verified
                properties:
                  address:
                    type: string
                    minLength: 1
                  verified:
                    type: boolean
            type:
              type: string
              minLength: 1
            status:
              type: string
              minLength: 1
            active:
              type: boolean
            roles:
              type: array
              items:
                required: []
                properties: {}
            name:
              type: string
              minLength: 1
            lastLogin:
              type: string
              minLength: 1
            statusConnection:
              type: string
              minLength: 1
            utcOffset:
              type: number
            username:
              type: string
              minLength: 1
            canViewAllInfo:
              type: boolean
          required:
            - _id
            - createdAt
            - services
            - emails
            - type
            - status
            - active
            - roles
            - name
            - lastLogin
            - statusConnection
            - utcOffset
            - username
            - canViewAllInfo
        success:
          type: boolean
      required:
        - user
        - success
      x-examples:
        example-1:
          user:
            _id: QToMt7KgHyG7zBefh
            createdAt: '2021-10-19T14:27:39.580Z'
            services:
              password:
                bcrypt: $2b$10$X1u5g.0mtxOCcwAbU/h9Zu9SFKXSvRs6RdGQ7p/ZhEnuzvDtmo7XG
              email2fa:
                enabled: true
                changedAt: '2021-10-19T14:27:39.580Z'
              email:
                verificationTokens:
                  - token: rd5y-7z1_tARxdfwsTqtOj70DB91x9qsdPn8pU-EJS3
                    address: a@v.com
                    when: '2021-10-19T14:27:39.597Z'
              resume:
                loginTokens:
                  - when: '2021-11-29T19:12:43.230Z'
                    hashedToken: o6ZqaZhFRDfdKGLwnkEoXU4Llsfaek+RQi6MDdgqhwg=
                  - when: '2021-11-29T19:12:43.322Z'
                    hashedToken: VHQeM36QvRjsQ4qMGh31+47fycKKd5j4YsBhfqX4sMk=
                  - when: '2021-11-29T19:16:44.513Z'
                    hashedToken: mWelZQmES0ICvnprMiPAP9O5mLm8CYM/KQO9UCxj4Vo=
                  - when: '2021-11-29T19:16:44.600Z'
                    hashedToken: evNAzvbovbkY6XRpnbVVfKUCXHjiyN6MosmAtzCsefA=
                  - when: '2021-11-29T19:25:23.093Z'
                    hashedToken: h8/S4kFHpD8icB11zXCc1cPcr6g28ziXRk3gqhOJAKE=
                  - when: '2021-11-29T19:25:23.195Z'
                    hashedToken: NYYe9cPn58Ykq9xBK9Mo0Qk3+FTmBUfl9VFcDY33xgU=
                  - when: '2021-11-29T19:46:32.633Z'
                    hashedToken: Z5O25w6vv9sRg7nGJCdl8pO0VwJVcaI5wumVv0p13Sc=
                  - when: '2021-11-29T19:46:32.884Z'
                    hashedToken: Uy3vvi3nQkZHGzwRrzrKVYHlOB68+pNP3pP7M+r5ZPg=
                  - when: '2021-11-30T11:51:15.361Z'
                    hashedToken: 6pLMj6fwXYVbfqDEcgR7LcI7P9kp8l7YR57I8ahsaDQ=
                  - when: '2021-11-30T11:51:15.468Z'
                    hashedToken: n4SzKH+K9Um0Wj8v2SMwmgyJiHOL4khwBcLWp3o+QE8=
                  - when: '2021-11-30T11:53:56.616Z'
                    hashedToken: mm1H89OmU78ROhJ5ED5+TrKx0v4/WhN0nmg0aV3hdhc=
                  - when: '2021-11-30T11:53:56.715Z'
                    hashedToken: V/dgLeq/12UyPqs9mt2rNGPnIe5VN/PJ+VzQCB+AI5U=
                  - when: '2021-11-30T11:59:41.899Z'
                    hashedToken: +HpAOvSgVsrOPqROG1DUsch5pM/OdwsdBvZ2wg3AFB8=
                  - when: '2021-11-30T12:16:35.470Z'
                    hashedToken: OZ6YilHQid2wfVRdSdqVbWlItOevTGOb4j0aYWAUllw=
                  - when: '2021-11-30T12:16:35.561Z'
                    hashedToken: c42cYAH56X3mFDYnnuYNVssr5159boBkOheQvgIaZO0=
                  - when: '2021-11-30T12:18:05.633Z'
                    hashedToken: md33HrpmOt2drUvX9kxe8nMqop9edCHXVq2If6o6TFI=
                  - when: '2021-11-30T12:18:05.731Z'
                    hashedToken: 8DayeG6GygKhVFM+c0dg2bcFplQeY7k3pIzigfTBlVM=
                  - when: '2021-11-30T12:19:54.047Z'
                    hashedToken: DRK+04CU+JKCnx/VP9Uu2jFDkZfkSKIylfC6noJJaIs=
                  - when: '2021-11-30T12:19:54.141Z'
                    hashedToken: 7b+Tdjqh7+fDroX22xpFYZH1ax+eh7NUUGzE/ssTCu0=
                  - when: '2021-11-30T12:22:28.900Z'
                    hashedToken: SdB3b6kCPFJoZe7qYcVjv5Ao8yyh2e/2VSxeXiHV37w=
                  - when: '2021-11-30T12:22:29.001Z'
                    hashedToken: nHDEUdnUopRqnRMDSsAniOwed8iTnWZCJMjkQenu7vY=
                  - when: '2021-11-30T12:28:09.698Z'
                    hashedToken: XXVHn3kbIQk+gcpNXzeRTJd/pxW5IKvkzk3/M5XHZGk=
                  - when: '2021-11-30T12:28:09.801Z'
                    hashedToken: 2DxzRHJa9t6lYguS2EA54zCthYE/5zfwQDTAvw5s1Uo=
                  - when: '2021-11-30T12:31:59.489Z'
                    hashedToken: dlqyokt22kpIhia0R8XVQcVhCOIK18ZaCiOdlTDYhHg=
                  - when: '2021-11-30T12:31:59.582Z'
                    hashedToken: UyRI0AIdiOK/fxzVZpKRKq8lPGX7A5zbtKE+U31ho3o=
                  - when: '2021-11-30T12:33:48.248Z'
                    hashedToken: eQET8vB7UDWCR0m6W78JD3ts6M+UHhCKkHCaJRhkYeA=
                  - when: '2021-11-30T12:33:48.340Z'
                    hashedToken: CATov6TdvXRpHel/CoNYIhvzotmhSAm6jSU++lTGvqc=
                  - when: '2021-11-30T14:08:52.546Z'
                    hashedToken: uoOjFznSqVne4Kg3ky+JvSCGNl4tK1EP0ynqYhKCuCE=
                  - when: '2021-11-30T14:34:35.886Z'
                    hashedToken: DbjmfLMVjBvhwu39VQliLJEZ+8GwkuJtzi9dDeTH11w=
                  - when: '2021-11-30T14:34:35.984Z'
                    hashedToken: wDA9azDwpeX6z1arxY2EWRzmIlmCwOBlUiaM0oak2Ts=
                  - when: '2021-12-02T13:02:47.197Z'
                    hashedToken: zR2fb29kzM8gd+cM9XWNiE/wH86EHFD3WD2W+ir4tm8=
                  - when: '2021-12-06T17:18:51.383Z'
                    hashedToken: mXfokvSWyWCtJvUKE9/IuD+cmZVtEK52xYKKjY4ZEfA=
                  - when: '2021-12-06T17:18:51.488Z'
                    hashedToken: VdvP3mw3IiASN1rE7akbS5ZUsSRdjfCXejg2hXqW+EY=
                  - when: '2021-12-06T17:29:52.685Z'
                    hashedToken: 7MbAK8VX5ON34B8llA04hbQnTqQuyQwEnXdRycmP2AE=
                  - when: '2021-12-06T17:29:52.774Z'
                    hashedToken: 1tYL259QmfI7aU99RON95v9aegE1FCuSw4Z/XdOUnzk=
                  - when: '2021-12-15T13:41:44.561Z'
                    hashedToken: RfnIBpaxyo0XRn09d0ZJ7QIPft4BzUZFOrEdP8QI6eE=
                  - when: '2021-12-15T13:41:44.657Z'
                    hashedToken: TB1ShQQ2oRpfY544REPXqzqg6/AdJuGDM+W59HL0Ui0=
                  - when: '2021-12-15T13:41:50.582Z'
                    hashedToken: ZB0Ug+1b/DO4sOtToCswBWI4k6ZyB8aIgqMP4KZD1dI=
                  - when: '2021-12-15T13:41:50.678Z'
                    hashedToken: FcIO2uWN5+Xx382cCoEUEZl1yCJwdTTGoPPTbCPhjVE=
                  - when: '2021-12-15T13:44:17.009Z'
                    hashedToken: cxBmRJageqXd1CCsqltYy6UIiGuLMi+bqD1Pems7kX4=
                  - when: '2021-12-15T13:44:17.102Z'
                    hashedToken: VxGvh02OrUIOcW1Lr/OBXqFWbl5cqlolconz7SgZS5g=
                  - when: '2021-12-15T14:02:14.120Z'
                    hashedToken: pfb2S1RBfWJwpfN30nbRLIX9kO9NupIBRRS1QRNLvhA=
                  - when: '2021-12-15T14:02:14.222Z'
                    hashedToken: +tI4k2G5+boUvXq93GlfM+oG1R4amde9Nk/ApcAKwO0=
                  - when: '2021-12-15T14:02:28.096Z'
                    hashedToken: f4rpBxf6P5GqMKfRcjwM//Wdpy1E3M/17VCzqgtvwds=
                  - when: '2021-12-15T14:02:28.201Z'
                    hashedToken: gnVFPN44RV2zChuTYG2wBY42bM5Rbd2lWrtObxVDsAQ=
                  - when: '2021-12-15T14:12:35.899Z'
                    hashedToken: Nh8AjBCn+PgX7IPKagw2SFiv4biMU72XF9b0DAmgrx4=
                  - when: '2021-12-15T14:12:36.032Z'
                    hashedToken: j05FN4tAboAFAesEBc8DYw7dpmaT2Erhoq7qF+FrtBo=
                  - when: '2021-12-15T14:14:22.622Z'
                    hashedToken: JwlVP+7H0EeqXMx8t8iGlVDBhCnILAz74aPTPjTZJNw=
                  - when: '2021-12-15T14:14:22.712Z'
                    hashedToken: z5Gn/KjwopOhPrQm3ZHdg8XKagUf9LlZ1AeCbsCpdeE=
                  - when: '2022-01-03T18:47:47.024Z'
                    hashedToken: hHE4aQTd6i51qQMiTpMUUGvt2FzJdXDsXKX2fD5Xheg=
            emails:
              - address: a@v.com
                verified: false
            type: user
            status: online
            active: true
            roles:
              - user
              - admin
            name: admin
            lastLogin: '2022-01-03T18:48:53.363Z'
            statusConnection: online
            utcOffset: 2
            username: admin
            canViewAllInfo: true
          success: true
